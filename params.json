{"name":"DocRails for ROR Lab. Guides","tagline":"PLEASE CHECK http://github.com/lifo/docrails/wikis","body":"ROR Lab.에서는 공식 레일스가이드의 `edge` 버전(http://edgeguides.rubyonrails.org) 을 한글화하는 프로젝트를 진행하고 있습니다. \r\n이전까지는 개인적으로(rorlab@gmail.com) 한글화 작업(레일스가이드의 MVC 부분과 asset pipeline)을 해 왔으나 혼자서 docrails의 edge버전을 업데이트해서 한글화하기에는 역부족임을 느끼게 되어, 뜻을 같이하는 분들도 참여할 수 있는 기회를 드리기 위해 공동으로 한글번역 작업을 진행하기로 했습니다.  \r\n\r\n그래서 2013년 4월 30일, github.com의 기존 계정(rorlab)을 이용하여 `RORLabGuides`라는 그룹계정(github.com에서는 `Organization`이라고 말함)을 만든 후, 공식 docrails 저장소(lifo/docrails)를 fork하였습니다. 따라서 한글번역 작업의 소스를 관리할 저장소의 URL은 https://github.com/RORLabGuides/docrails 가 되겠습니다.\r\n\r\n한글번역 작업을 하기 위해서는 자신의 로컬머신에 최소한 ruby와 git 이 설치되어 있어야 합니다. \r\n그리고 http://github.com에 로그인한 후(계정이 없는 분은 회원가입 후 로그인, 무료), 페이지 상단에 있는 검색란에 `RORLabGuides/docrails`라고 입력하고 엔터키를 칩니다. 또는 웹브라우저에서 `https://github.com/RORLabGuides/docrails` 주소로 직접 이동하셔도 됩니다.\r\n\r\n저장소 Fork 하기\r\n----\r\n\r\n이 페이지의 상단에 있는 `Fork` 버튼을 클릭하여 소스를 본인의 계정으로 복사(`fork`에 대한 적당한 한글번역이 없군요^^) 합니다. \r\n이제 `github.com`에 본인 계정으로 로그인하면 본인의 `repositories`에 방금전에 `fork`한 `docrails 저장소`가 존재하게 됩니다. \r\n\r\n본인의 저장소 clone하기\r\n----\r\n\r\n실제로 한글 번역 작업을 하기 위해서 우선 본인의 로컬머신에 `ruby`와 `git` 가 설치되어 있는지 확인하고, 아래와 같이 터미널 쉘에서 소스를 `git clone` 합니다. \r\n\r\n```\r\n$ git clone git@github.com:<user_git_accout>/docrails.git\r\n```\r\n\r\n여기서 주의할 것은 `<user_git_account>` 에는 본인의 git 계정명을 입력해야 합니다. \r\nclone후 docrails 디렉토리로 이동하고 아래와 같이 remote origin 브랜치의 주소를 https 프로토콜 주소로 변경해 줍니다. \r\n\r\n```\r\n$ cd docrails\r\n$ git remote show origin\r\n* remote origin\r\n  Fetch URL: git@github.com:<user_git_account>/docrails.git\r\n  Push  URL: git@github.com:<user_git_account>/docrails.git\r\n  HEAD branch: master\r\n  Remote branches:\r\n    gh-pages tracked\r\n    master   tracked\r\n  Local branch configured for 'git pull':\r\n    master merges with remote master\r\n  Local ref configured for 'git push':\r\n    master pushes to master (up to date)\r\n$ git remote rm origin\r\n$ git remote add origin https://github.com/<user_git_account>/docrails.git\r\n$ git remote show origin\r\n* remote origin\r\n  Fetch URL: https://github.com/<user_git_account>/docrails.git\r\n  Push  URL: https://github.com/<user_git_account>/docrails.git\r\n  HEAD branch: master\r\n  Remote branches:\r\n    gh-pages new (next fetch will store in remotes/origin)\r\n    master   new (next fetch will store in remotes/origin)\r\n  Local ref configured for 'git push':\r\n    master pushes to master (up to date)\r\n$ git push\r\nEverything up-to-date\r\n```\r\n\r\n참고로 remote origin 브랜치의 주소를 https:// 프로토콜로 변경하는 이유는 본인의 github.com 계정정보에서 별도의 SSH Keys 등록 과정이 필요없기 때문입니다. 한편 이렇게 변경작업을 하지 않고 사용할 경우에는 본인의 ssh 공개키(~/.ssh/id_rsa)를 SSH Keys로 등록해 주어야 합니다. \r\n\r\n작업소스파일의 위치\r\n----\r\n\r\n이제, 아래의 디렉토리로 이동합니다. \r\n\r\n```\r\n$ cd docrails/guides/source/ko\r\n```\r\n\r\n바로 여기에 있는 파일들이 번역을 할 소스입니다. 본인에게 할당된 파일을 에디터로 열고 한글로 번역을 하면 됩니다. \r\n\r\n한글 번역시 주의사항\r\n---\r\n\r\n`ko` 폴더에는 확장자가 `.md`, `.erb`, `.yaml`인 파일들이 존재하게 됩니다. 바로 이 폴더의 있는 파일들 중에 어떤 것을 작업할 것인지를 관리자와 상의해서 결정하게 되며, 다른 분들이 작업하는 파일과의 commit 충돌을 피하기 위해서, 다른 파일들에 대해서는 번역작업을 해서는 안됩니다. 즉, 한글번역 작업 파일로 할당받은 것에 대해서만 작업을 해야함을 잊어서는 안됩니다.\r\n\r\n번역한 파일 커밋하기\r\n---\r\n\r\n번역을 완료하면 아래와 같이 `docrails/` 디렉토리로 이동합니다. \r\n\r\n```\r\n$ cd docrails\r\n```\r\n\r\n그리고 아래와 같이 commit 작업을 합니다. \r\n\r\n```\r\n$ git add .\r\n$ git commit -m \"translated <file_name>\"\r\n$ git push (origin master)\r\n```\r\n\r\n`<file_name>`에는 번역작업한 파일명을 입력하면 됩니다.\r\n이후에 github.com 사이트의 본인의 docrails 페이지로 이동하여 해당파일이 변경되었는지를 확인하면 제대로 작업이 된 것입니다. \r\n\r\npull-request하기\r\n----\r\n\r\n이제 본인의 docrails 페이지 상단에 있는 `Pull Request` 버튼을 클릭하면 잠시 후에 번역작업한 내용이 RORLabGuides/docrails 로 merge 요청이 완료됩니다. \r\n\r\n그러면 RORLabGuides/docrails 관리자(rorlab@gmail.com)가 요청된 내용을 검토하고 이상없으면 `merge` 작업을 하게 됩니다. 이 때 본인에게 확인메일이 발송됩니다. \r\n\r\n언제 `pull request` 내용이 `merge` 될 지는 순전히 관리자 마음에 달려 있죠^^. 확인메일을 확인한 후, RORLabGuides/docrails 페이지로 이동하여 최종결과를 확인하면 모든 절차가 일단락되는 것입니다. \r\n\r\n자신의 로컬 저장소 docrails 업데이트하기\r\n--- \r\n\r\n레일스가이드 한글번역을 할 때 `RORLabGuides/docrails` 을 `fork` 해서 자신의 `git` 계정에 있는 `docrails`에 대해서 작업을 하게 됩니다.\r\n그리고 번역작업이 완료되면 `Pull Request` 를 `RORLabGuides/docrails` 로 하게 됩니다. 이 때 관리자(rorlab@gmail.com)는 요청된 내용을 검토한 후 `RORLabGuides/docrails` 에 머지하게 됩니다. 관린자는 최종적으로 머지된 소스를 가지고 ROR Lab. 웹사이트로 `publish`하게 되어 http://rorlab.org/rg/index.html 로 연결하면 확인할 수 있게 됩니다. \r\n\r\n한글번역 공동작업에 참여하는 다른 분들이 작업한 소스도 `Pull Request` 되어 `RORLabGuides`에 머지되기 때문에 머지된 최종 버전을 자신의 `docrails` 저장소에 반영하기 위해서는 `git pull` 명령을 사용해 합니다. \r\n\r\nUpstream 원격저장소 지정하기\r\n---\r\n\r\n이를 위해서는 먼저 자신의 로컬머신 docrails 폴더에서 아래와 같이 `upstream`이라는 이름의 remote 저장소를 지정 합니다. \r\n\r\n```\r\n$ git remote add upstream https://github.com/RORLabGuides/docrails.git\r\n```\r\n\r\n실행결과, 원격 저장소들과 각각의 브랜치는 다음과 같습니다. \r\n\r\n```\r\n$ git branch -r\r\n  origin/gh-pages\r\n  origin/master\r\n  upstream/gh-pages\r\n  upstream/master\r\n```\r\n\r\nUpstream 가져와서 머지하기\r\n---\r\n\r\n이제 upstream 원격 브랜치를 로컬 master 브랜치로 pull(fetch+merge) 하면 됩니다.\r\n\r\n```\r\n$ git checkout master  // 로컬 저장소의 현재브랜치를 master로 변경\r\n$ git pull upstream master  // 원격 저장소 upstream의 master 브랜치를 git pull 함.\r\nFrom https://github.com/RORLabGuides/docrails\r\n * branch            master     -> FETCH_HEAD\r\nAlready up-to-date.\r\n```\r\n\r\n수고하셨습니다. \r\n\r\n관리자(rorlab@gmail.com)","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}